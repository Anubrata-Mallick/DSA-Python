'''
Breaking the problem :
    1. Array is sorted (ascending)
    2. Array is roated at unknown pivot

Functionality :
    1. return the index of given element from the array

Solution :
    1. Find the pivot or breaking point
    2. use binary search for both half of the array [ devided by the pivot ]
'''

class Solution:
    def findPivot(self, arr: List[int], l: int, r: int) -> int:
        while l <= r:
            mid = (l + r) // 2

            # Check boundary conditions to avoid IndexError
            if mid < r and arr[mid] > arr[mid + 1]:
                return mid
            if mid > l and arr[mid] < arr[mid - 1]:
                return mid - 1
            if arr[mid] >= arr[l]:
                l = mid + 1
            else:
                r = mid - 1
        return -1  # Array is not rotated

    def binarySearch(self, arr: List[int], l: int, r: int, k: int) -> int:
        while l <= r:
            mid = (l + r) // 2

            if arr[mid] == k:
                return mid
            elif arr[mid] < k:
                l = mid + 1
            else:
                r = mid - 1
        return -1 

    def search(self, nums: List[int], target: int) -> int:
        l, r = 0, len(nums) - 1
        pivot = self.findPivot(nums, l, r)

        if pivot == -1:  # Array is not rotated
            return self.binarySearch(nums, l, r, target)

        # Try to find target in either of the two sorted parts
        if nums[l] <= target <= nums[pivot]:
            return self.binarySearch(nums, l, pivot, target)
        return self.binarySearch(nums, pivot + 1, r, target)


        
